{
  "version": 3,
  "sources": [
    "../../../src/components/CodeMirror/index.tsx"
  ],
  "names": [
    "SERVER_RENDERED",
    "navigator",
    "global",
    "PREVENT_CODEMIRROR_RENDER",
    "cm",
    "require",
    "ReactCodeMirror",
    "props",
    "editorWillMount",
    "instance",
    "textarea",
    "options",
    "defineMode",
    "name",
    "fn",
    "editorOption",
    "tabSize",
    "lineNumbers",
    "mode",
    "editor",
    "fromTextArea",
    "renderCodeMirror",
    "prevProps",
    "value",
    "width",
    "height",
    "getValue",
    "setValue",
    "setSize",
    "nextProps",
    "nextState",
    "propNames",
    "Object",
    "keys",
    "eventHandle",
    "filter",
    "prop",
    "test",
    "eventDict",
    "forEach",
    "ele",
    "replace",
    "s",
    "slice",
    "toLowerCase",
    "getEventHandleFromProps",
    "event",
    "handle",
    "on",
    "Component"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import * as CodeMirror from 'codemirror';\nimport 'codemirror/mode/markdown/markdown';\nimport React, { Component } from 'react';\nimport { DomEvent, IDefineModeOptions, IEventDict, IGetSelectionOptions, IInstance, ISetScrollOptions, ISetSelectionOptions } from '../../common/codemirror';\nimport './codemirror.less';\nimport './index.less';\n\ndeclare let global: any;\ndeclare let require: any;\n\nconst SERVER_RENDERED = (typeof navigator === 'undefined' || global.PREVENT_CODEMIRROR_RENDER === true);\n\nlet cm: any;\nif (!SERVER_RENDERED) {\n  // tslint:disable-next-line: no-var-requires\n  cm = require('codemirror');\n}\n\nexport interface ICodeMirror {\n  value?: string,\n  width?: number | string,\n  height?: number | string,\n  className?: string;\n  cursor?: CodeMirror.Position;\n  defineMode?: IDefineModeOptions;\n  editorDidConfigure?: (editor: IInstance) => void;\n  editorDidMount?: (editor: IInstance, value: string, cb: () => void) => void;\n  editorWillMount?: () => void;\n  editorWillUnmount?: (lib: any) => void;\n  onClear?: (from: CodeMirror.Position, to: CodeMirror.Position) => void;\n  onBlur?: DomEvent;\n  onChange?: (editor: IInstance, data: CodeMirror.EditorChange, value: string) => void;\n  onContextMenu?: DomEvent;\n  onCopy?: DomEvent;\n  onCursor?: (editor: IInstance, data: CodeMirror.Position) => void;\n  onCut?: DomEvent;\n  onCursorActivity?: (editor: IInstance) => void;\n  onDblClick?: DomEvent;\n  onDragEnter?: DomEvent;\n  onDragLeave?: DomEvent;\n  onDragOver?: DomEvent\n  onDragStart?: DomEvent;\n  onDrop?: DomEvent;\n  onFocus?: DomEvent\n  onGutterClick?: (editor: IInstance, lineNumber: number, gutter: string, event: Event) => void;\n  onKeyDown?: DomEvent;\n  onKeyPress?: DomEvent;\n  onKeyUp?: DomEvent;\n  onMouseDown?: DomEvent;\n  onPaste?: DomEvent;\n  onRenderLine?: (editor: IInstance, line: CodeMirror.LineHandle, element: HTMLElement) => void;\n  onScroll?: (editor: IInstance, data: CodeMirror.ScrollInfo) => void;\n  onSelection?: (editor: IInstance, data: IGetSelectionOptions) => void;\n  onTouchStart?: DomEvent;\n  onUpdate?: (editor: IInstance) => void;\n  onViewportChange?: (editor: IInstance, start: number, end: number) => void;\n  options?: CodeMirror.EditorConfiguration\n  selection?: { ranges: ISetSelectionOptions[], focus?: boolean };\n  scroll?: ISetScrollOptions;\n  [key: string]: any,\n}\n\nexport interface ICodeMirrorState {\n  value: string;\n}\n\nexport default class ReactCodeMirror extends Component<ICodeMirror, ICodeMirrorState> {\n  public static defaultProps: ICodeMirror = {\n    height: '100%',\n    options: {\n      lineNumbers: true,\n      mode: 'markdown',\n      tabSize: 2,\n    },\n    value: '',\n    width: '100%',\n  }\n  public textarea!: HTMLTextAreaElement;\n  public editor!: CodeMirror.Editor;\n  // public editor!: Doc | Editor | EditorFromTextArea | Editor;\n  public constructor(props: Readonly<ICodeMirror>) {\n    super(props);\n    if (SERVER_RENDERED) {\n      return;\n    }\n\n    if (this.props.editorWillMount) {\n      this.props.editorWillMount();\n    }\n  }\n  public render() {\n    return (\n      <textarea ref={(instance: HTMLTextAreaElement) => this.textarea = instance} />\n    );\n  }\n\n  public componentDidMount() {\n    if (SERVER_RENDERED) {\n      return;\n    }\n\n    const { options } = this.props;\n    if (this.props.defineMode) {\n      if (this.props.defineMode.name && this.props.defineMode.fn) {\n        cm.defineMode(this.props.defineMode.name, this.props.defineMode.fn);\n      }\n    }\n\n    const editorOption = { tabSize: 2, lineNumbers: true, ...options, mode: 'markdown' };\n    // 生成codemirror实例\n    this.editor = cm.fromTextArea(this.textarea, editorOption) as CodeMirror.EditorFromTextArea;\n    this.renderCodeMirror(this.props);\n  }\n\n  componentDidUpdate(prevProps: ICodeMirror) {\n    const { value, width, height } = this.props;\n    if (this.editor.getValue() !== value && value !== prevProps.value) {\n      this.editor.setValue(value || '');\n    }\n    if (width !== prevProps.width || height !== prevProps.height) {\n      // Setting Size\n      this.editor.setSize(width, height);\n    }\n  }\n\n  public shouldComponentUpdate(nextProps: ICodeMirror, nextState: ICodeMirrorState) {\n    return nextProps.value !== this.props.value \n    || nextProps.options !== this.props.options\n    || nextProps.height !== this.props.height\n    || nextProps.width !== this.props.width;\n  }\n  // 将 props 中所有的事件处理函数映射并保存\n  public getEventHandleFromProps(): IEventDict {\n    const propNames = Object.keys(this.props);\n    const eventHandle = propNames.filter((prop) => {\n      return /^on+/.test(prop);\n    });\n\n    const eventDict: IEventDict = {};\n    eventHandle.forEach((ele) => {\n      eventDict[ele] = ele.replace(/^on[A-Z]/g, s => s.slice(2).toLowerCase()) as string;\n    });\n\n    return eventDict;\n  }\n\n  private renderCodeMirror(props: ICodeMirror) {\n    const { value, width, height } = props;\n    // 获取CodeMirror用于获取其中的一些常量\n    // 事件处理映射\n    const eventDict = this.getEventHandleFromProps();\n    Object.keys(eventDict).forEach((event: string) => {\n      const handle = this.props[event];\n      this.editor.on(eventDict[event] as keyof CodeMirror.EditorEventMap, handle);\n    });\n    // Init value\n    this.editor.setValue(value || '');\n    // this.editor.setOption(name, editorOption.mode);\n\n    if (width || height) {\n      // Setting size\n      this.editor.setSize(width, height);\n    }\n  }\n}"
  ]
}