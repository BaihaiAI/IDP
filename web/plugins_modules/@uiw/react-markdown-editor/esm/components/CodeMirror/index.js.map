{
  "version": 3,
  "sources": [
    "../../../src/components/CodeMirror/index.tsx"
  ],
  "names": [
    "React",
    "Component",
    "SERVER_RENDERED",
    "navigator",
    "global",
    "PREVENT_CODEMIRROR_RENDER",
    "cm",
    "require",
    "ReactCodeMirror",
    "constructor",
    "props",
    "textarea",
    "editor",
    "editorWillMount",
    "render",
    "instance",
    "componentDidMount",
    "options",
    "defineMode",
    "name",
    "fn",
    "editorOption",
    "tabSize",
    "lineNumbers",
    "mode",
    "fromTextArea",
    "renderCodeMirror",
    "componentDidUpdate",
    "prevProps",
    "value",
    "width",
    "height",
    "getValue",
    "setValue",
    "setSize",
    "shouldComponentUpdate",
    "nextProps",
    "nextState",
    "getEventHandleFromProps",
    "propNames",
    "Object",
    "keys",
    "eventHandle",
    "filter",
    "prop",
    "test",
    "eventDict",
    "forEach",
    "ele",
    "replace",
    "s",
    "slice",
    "toLowerCase",
    "event",
    "handle",
    "on",
    "defaultProps"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import * as CodeMirror from 'codemirror';\nimport 'codemirror/mode/markdown/markdown';\nimport React, { Component } from 'react';\nimport { DomEvent, IDefineModeOptions, IEventDict, IGetSelectionOptions, IInstance, ISetScrollOptions, ISetSelectionOptions } from '../../common/codemirror';\nimport './codemirror.less';\nimport './index.less';\n\ndeclare let global: any;\ndeclare let require: any;\n\nconst SERVER_RENDERED = (typeof navigator === 'undefined' || global.PREVENT_CODEMIRROR_RENDER === true);\n\nlet cm: any;\nif (!SERVER_RENDERED) {\n  // tslint:disable-next-line: no-var-requires\n  cm = require('codemirror');\n}\n\nexport interface ICodeMirror {\n  value?: string,\n  width?: number | string,\n  height?: number | string,\n  className?: string;\n  cursor?: CodeMirror.Position;\n  defineMode?: IDefineModeOptions;\n  editorDidConfigure?: (editor: IInstance) => void;\n  editorDidMount?: (editor: IInstance, value: string, cb: () => void) => void;\n  editorWillMount?: () => void;\n  editorWillUnmount?: (lib: any) => void;\n  onClear?: (from: CodeMirror.Position, to: CodeMirror.Position) => void;\n  onBlur?: DomEvent;\n  onChange?: (editor: IInstance, data: CodeMirror.EditorChange, value: string) => void;\n  onContextMenu?: DomEvent;\n  onCopy?: DomEvent;\n  onCursor?: (editor: IInstance, data: CodeMirror.Position) => void;\n  onCut?: DomEvent;\n  onCursorActivity?: (editor: IInstance) => void;\n  onDblClick?: DomEvent;\n  onDragEnter?: DomEvent;\n  onDragLeave?: DomEvent;\n  onDragOver?: DomEvent\n  onDragStart?: DomEvent;\n  onDrop?: DomEvent;\n  onFocus?: DomEvent\n  onGutterClick?: (editor: IInstance, lineNumber: number, gutter: string, event: Event) => void;\n  onKeyDown?: DomEvent;\n  onKeyPress?: DomEvent;\n  onKeyUp?: DomEvent;\n  onMouseDown?: DomEvent;\n  onPaste?: DomEvent;\n  onRenderLine?: (editor: IInstance, line: CodeMirror.LineHandle, element: HTMLElement) => void;\n  onScroll?: (editor: IInstance, data: CodeMirror.ScrollInfo) => void;\n  onSelection?: (editor: IInstance, data: IGetSelectionOptions) => void;\n  onTouchStart?: DomEvent;\n  onUpdate?: (editor: IInstance) => void;\n  onViewportChange?: (editor: IInstance, start: number, end: number) => void;\n  options?: CodeMirror.EditorConfiguration\n  selection?: { ranges: ISetSelectionOptions[], focus?: boolean };\n  scroll?: ISetScrollOptions;\n  [key: string]: any,\n}\n\nexport interface ICodeMirrorState {\n  value: string;\n}\n\nexport default class ReactCodeMirror extends Component<ICodeMirror, ICodeMirrorState> {\n  public static defaultProps: ICodeMirror = {\n    height: '100%',\n    options: {\n      lineNumbers: true,\n      mode: 'markdown',\n      tabSize: 2,\n    },\n    value: '',\n    width: '100%',\n  }\n  public textarea!: HTMLTextAreaElement;\n  public editor!: CodeMirror.Editor;\n  // public editor!: Doc | Editor | EditorFromTextArea | Editor;\n  public constructor(props: Readonly<ICodeMirror>) {\n    super(props);\n    if (SERVER_RENDERED) {\n      return;\n    }\n\n    if (this.props.editorWillMount) {\n      this.props.editorWillMount();\n    }\n  }\n  public render() {\n    return (\n      <textarea ref={(instance: HTMLTextAreaElement) => this.textarea = instance} />\n    );\n  }\n\n  public componentDidMount() {\n    if (SERVER_RENDERED) {\n      return;\n    }\n\n    const { options } = this.props;\n    if (this.props.defineMode) {\n      if (this.props.defineMode.name && this.props.defineMode.fn) {\n        cm.defineMode(this.props.defineMode.name, this.props.defineMode.fn);\n      }\n    }\n\n    const editorOption = { tabSize: 2, lineNumbers: true, ...options, mode: 'markdown' };\n    // 生成codemirror实例\n    this.editor = cm.fromTextArea(this.textarea, editorOption) as CodeMirror.EditorFromTextArea;\n    this.renderCodeMirror(this.props);\n  }\n\n  componentDidUpdate(prevProps: ICodeMirror) {\n    const { value, width, height } = this.props;\n    if (this.editor.getValue() !== value && value !== prevProps.value) {\n      this.editor.setValue(value || '');\n    }\n    if (width !== prevProps.width || height !== prevProps.height) {\n      // Setting Size\n      this.editor.setSize(width, height);\n    }\n  }\n\n  public shouldComponentUpdate(nextProps: ICodeMirror, nextState: ICodeMirrorState) {\n    return nextProps.value !== this.props.value \n    || nextProps.options !== this.props.options\n    || nextProps.height !== this.props.height\n    || nextProps.width !== this.props.width;\n  }\n  // 将 props 中所有的事件处理函数映射并保存\n  public getEventHandleFromProps(): IEventDict {\n    const propNames = Object.keys(this.props);\n    const eventHandle = propNames.filter((prop) => {\n      return /^on+/.test(prop);\n    });\n\n    const eventDict: IEventDict = {};\n    eventHandle.forEach((ele) => {\n      eventDict[ele] = ele.replace(/^on[A-Z]/g, s => s.slice(2).toLowerCase()) as string;\n    });\n\n    return eventDict;\n  }\n\n  private renderCodeMirror(props: ICodeMirror) {\n    const { value, width, height } = props;\n    // 获取CodeMirror用于获取其中的一些常量\n    // 事件处理映射\n    const eventDict = this.getEventHandleFromProps();\n    Object.keys(eventDict).forEach((event: string) => {\n      const handle = this.props[event];\n      this.editor.on(eventDict[event] as keyof CodeMirror.EditorEventMap, handle);\n    });\n    // Init value\n    this.editor.setValue(value || '');\n    // this.editor.setOption(name, editorOption.mode);\n\n    if (width || height) {\n      // Setting size\n      this.editor.setSize(width, height);\n    }\n  }\n}"
  ]
}